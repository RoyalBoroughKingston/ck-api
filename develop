#!/usr/bin/env bash

# Set script scope environment variables for dev or CI.
export APP_PORT=${APP_PORT:-80}
export DB_PORT=${DB_PORT:-3306}
export DB_ROOT_PASS=${DB_ROOT_PASS:-secret}
export DB_NAME=${DB_NAME:-connected_kingston}
export DB_USER=${DB_USER:-connected_kingston}
export DB_PASS=${DB_PASS:-secret}
export ELASTICSEARCH_PORT=${ELASTICSEARCH_PORT:-9200}

# Decide which docker-compose file to use.
COMPOSE_FILE="dev"

# Disable pseudo-TTY allocation for CI (Travis).
# The -T flag removes interaction.
TTY=""

# Travis CI provides a CI flag which can be used to check
# if this is running in a CI environment.
if [ ${CI:-false} == "true" ]; then
    COMPOSE_FILE="ci"
    TTY="-T"
fi

COMPOSE="docker-compose -f docker-compose.yml -f docker-compose.$COMPOSE_FILE.yml"

# Pass arguments to docker-compose, or default to docker-compose ps.
if [ $# -gt 0  ]; then
    case "$1" in
        art|artisan )
            shift 1
            ${COMPOSE} run --rm ${TTY} \
                api \
                php artisan "$@"
            ;;
        dump-server|dumpserver )
            shift 1
            ${COMPOSE} exec \
                api \
                php artisan dump-server "$@"
            ;;
        composer )
            shift 1
            ${COMPOSE} run --rm ${TTY} \
                api \
                composer "$@"
            ;;
        phpunit )
            shift 1
            ${COMPOSE} run --rm ${TTY} \
                api \
                php vendor/bin/phpunit "$@"
            ;;
        phpcs )
            shift 1
            ${COMPOSE} run --rm ${TTY} \
                api \
                php vendor/bin/phpcs "$@"
            ;;
        phpcbf )
            shift 1
            ${COMPOSE} run --rm ${TTY} \
                api \
                php vendor/bin/phpcbf "$@"
            ;;
        npm )
            shift 1
            ${COMPOSE} run --rm ${TTY} \
                node \
                npm "$@"
            ;;
        * ) ${COMPOSE} "$@"; ;;
    esac
else
    ${COMPOSE} ps
fi
