# /organisations
root:
  get:
    tags: [Organisations]
    summary: List all the organisations
    description: |
      **Permission:** `Open`
    security: []
    parameters:
    - $ref: /docs/core/parameters/page.yaml
    - $ref: /docs/core/parameters/per-page.yaml
    - $ref: /docs/core/parameters/filter-id.yaml
    - name: filter[name]
      in: query
      description: Name to filter by
      schema:
        type: string
    - name: filter[has_permission]
      in: query
      description: Filter organisations to only ones they have permissions for
      schema:
        type: boolean
    - name: sort
      in: query
      description: The fields to sort by [`name`]
      schema:
        type: string
        default: name
    responses:
      200:
        content:
          application/json:
            schema:
              allOf:
              - $ref: /docs/core/responses/resource-collection.yaml
              - type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: /docs/core/resources/organisation.yaml

  post:
    tags: [Organisations]
    summary: Create an organisation
    description: |
      **Permission:** `Global Admin`
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: /docs/core/requests/organisation.yaml#/store
    responses:
      200:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: /docs/core/resources/organisation.yaml

# /organisations/{organisation}
nested:
  get:
    tags: [Organisations]
    summary: Get a specific organisation
    description: |
      **Permission:** `Open`
    security: []
    parameters:
    - name: organisation
      in: path
      description: The ID or slug of the organisation
      required: true
      schema:
        type: string
    responses:
      200:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: /docs/core/resources/organisation.yaml

  put:
    tags: [Organisations]
    summary: Update a specific organisation
    description: |
      **Permission:** `Organisation Admin`
    parameters:
    - name: organisation
      in: path
      description: The ID or slug of the organisation
      required: true
      schema:
        type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: /docs/core/requests/organisation.yaml#/update
    responses:
      200:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: The update request has been received and needs to be reviewed
                data:
                  $ref: /docs/core/requests/organisation.yaml#/update

  delete:
    tags: [Organisations]
    summary: Delete a specific organisation
    description: |
      **Permission:** `Super Admin`
    parameters:
    - name: organisation
      in: path
      description: The ID or slug of the organisation
      required: true
      schema:
        type: string
    responses:
      200:
        content:
          application/json:
            schema:
              $ref: /docs/core/responses/resource-deleted.yaml

# /organisations/{organisation}/logo
logo:
  get:
    tags: [Organisations]
    summary: Get a specific organisation's logo
    description: |
      **Permission:** `Open`
    security: []
    parameters:
    - name: organisation
      in: path
      description: The ID or slug of the organisation
      required: true
      schema:
        type: string
    responses:
      200:
        content:
          image/png:
            schema:
              type: string
