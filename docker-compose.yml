version: "3"

services:
  app:
    image: royal-borough-kingston/ck-api/app
    build:
      context: ./docker/app
      dockerfile: Dockerfile
      args:
        BLACKFIRE_SERVER_ID: "${BLACKFIRE_SERVER_ID}"
        BLACKFIRE_SERVER_TOKEN: "${BLACKFIRE_SERVER_TOKEN}"
    environment:
      IS_LOCAL: "true"
    volumes:
      - .:/var/www/html
    networks:
      - app-net
    ports:
      - "${APP_PORT}:80"
    command: sh -c "/etc/init.d/blackfire-agent start; /usr/bin/supervisord"

  queue-worker:
    image: royal-borough-kingston/ck-api/app
    volumes:
      - .:/var/www/html
    networks:
      - app-net
    command: php artisan queue:work --queue=default,search,notifications --tries=1

  scheduler:
    image: royal-borough-kingston/ck-api/app
    volumes:
      - .:/var/www/html
    networks:
      - app-net
    command: php artisan ck:run-scheduler

  node:
    image: royal-borough-kingston/ck-api/node
    build:
      context: ./docker/node
      dockerfile: Dockerfile
    volumes:
      - .:/var/www/html

  mysql:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: "${DB_ROOT_PASS}"
      MYSQL_DATABASE: "${DB_NAME}"
      MYSQL_USER: "${DB_USER}"
      MYSQL_PASSWORD: "${DB_PASS}"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-net
    ports:
      - "${DB_PORT}:3306"

  mysql-testing:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: "${DB_ROOT_PASS}"
      MYSQL_DATABASE: "${DB_NAME}"
      MYSQL_USER: "${DB_USER}"
      MYSQL_PASSWORD: "${DB_PASS}"
    networks:
      - app-net
    command: mysqld --general-log=1 --general-log-file=/var/log/mysql/general-log.log

  redis:
    image: grokzen/redis-cluster:5.0.5
    volumes:
      - redis-data:/data
    networks:
      - app-net

  redis-testing:
    image: grokzen/redis-cluster:5.0.5
    networks:
      - app-net

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.3.2
    environment:
      discovery-type: single-node
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - app-net
    ports:
      - "${ELASTICSEARCH_PORT}:9200"

  troposphere:
    image: royal-borough-kingston/ck-api/troposphere
    build:
      context: ./docker/troposphere
      dockerfile: Dockerfile
    volumes:
      - ./aws:/tmp
    command: "python ${CFN_TEMPLATE}.py"

networks:
  app-net:
    driver: bridge

volumes:
  mysql-data:
    driver: local
  redis-data:
    driver: local
  elasticsearch-data:
    driver: local
